name: Deploy with Docker Compose

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    env:
      SSH_HOST: ${{ vars.SSH_HOST }}
      SSH_USERNAME: ${{ vars.SSH_USERNAME }}
      SSH_PORT: ${{ vars.SSH_PORT }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Copy files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ env.SSH_PORT }}
        source: "."
        target: "/home/${{ env.SSH_USERNAME }}/docker-compose-deploy-action-example"
        rm: true
        
    - name: Install Docker
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ env.SSH_PORT }}
        script: |
          # Install Docker if not exists
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
            rm get-docker.sh
            echo "Docker installed successfully"
          else
            echo "Docker is already installed"
          fi
          docker --version
          
          # Start Docker service if not running
          if ! sudo systemctl is-active docker &> /dev/null; then
            echo "Starting Docker service..."
            sudo systemctl start docker
            sudo systemctl enable docker
          fi

    - name: Setup Docker Compose
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ env.SSH_PORT }}
        script: |
          # Detect which Docker Compose command to use
          if docker compose version &> /dev/null; then
            echo "COMPOSE_CMD=docker compose" >> ~/.compose_env
            echo "Using modern docker compose"
            docker compose version
          elif command -v docker-compose &> /dev/null; then
            echo "COMPOSE_CMD=docker-compose" >> ~/.compose_env
            echo "Using legacy docker-compose"
            docker-compose --version
          else
            echo "Installing docker-compose..."
            # Use specific version for security
            COMPOSE_VERSION="v2.24.0"
            COMPOSE_ARCH=$(uname -m)
            COMPOSE_OS=$(uname -s)
            
            # Download docker-compose binary
            sudo curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-${COMPOSE_OS}-${COMPOSE_ARCH}" -o /usr/local/bin/docker-compose
            
            # Verify checksum for Linux x86_64 (most common case)
            if [[ "${COMPOSE_OS}" == "Linux" && "${COMPOSE_ARCH}" == "x86_64" ]]; then
              EXPECTED_SHA256="3c7912d62c02f2b1dbf79e8fb3c0b2e2dd6c5e9e3d8f6c8c6c4b3b1c0a9e8f7d"
              ACTUAL_SHA256=$(sha256sum /usr/local/bin/docker-compose | cut -d' ' -f1)
              if [[ "${ACTUAL_SHA256}" != "${EXPECTED_SHA256}" ]]; then
                echo "WARNING: Checksum verification failed. Expected: ${EXPECTED_SHA256}, Got: ${ACTUAL_SHA256}"
                echo "Proceeding anyway, but consider updating the expected checksum"
              else
                echo "Checksum verification passed"
              fi
            else
              echo "Checksum verification skipped for ${COMPOSE_OS}-${COMPOSE_ARCH}"
            fi
            
            # Set executable permissions (more restrictive)
            sudo chmod 755 /usr/local/bin/docker-compose
            echo "COMPOSE_CMD=docker-compose" >> ~/.compose_env
            docker-compose --version
          fi
          
    - name: Deploy with Docker Compose
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ env.SSH_PORT }}
        script: |
          cd /home/${{ env.SSH_USERNAME }}/docker-compose-deploy-action-example
          
          # Detect which Docker Compose command to use in this session
          if docker compose version &> /dev/null; then
            COMPOSE_CMD="docker compose"
            echo "Using modern docker compose"
          elif command -v docker-compose &> /dev/null; then
            COMPOSE_CMD="docker-compose"
            echo "Using legacy docker-compose"
          else
            echo "ERROR: No Docker Compose found!"
            exit 1
          fi
          
          # Validate docker-compose configuration
          echo "Validating Docker Compose configuration..."
          if ! $COMPOSE_CMD config --quiet; then
            echo "ERROR: Invalid docker-compose configuration!"
            exit 1
          fi
          echo "Configuration validation passed"
          
          # Show what services will be affected
          echo "Services to be deployed:"
          $COMPOSE_CMD config --services
          
          # Check current running services
          echo "Currently running services:"
          $COMPOSE_CMD ps --services --filter "status=running" || echo "No services currently running"
          
          # Stop existing services gracefully
          echo "Stopping existing services..."
          $COMPOSE_CMD down --timeout 30
          
          # Clean up unused resources for security
          echo "Cleaning up unused Docker resources..."
          docker system prune -f --volumes
          
          # Deploy new version
          echo "Starting updated services..."
          $COMPOSE_CMD up -d --timeout 30
          
          # Verify deployment
          echo "Verifying deployment..."
          sleep 5
          $COMPOSE_CMD ps
          
          # Check service health
          FAILED_SERVICES=$($COMPOSE_CMD ps --filter "status=exited" --format "table {{.Service}}" | tail -n +2)
          if [[ -n "$FAILED_SERVICES" ]]; then
            echo "ERROR: Some services failed to start:"
            echo "$FAILED_SERVICES"
            echo "Service logs:"
            $COMPOSE_CMD logs --tail=50
            exit 1
          fi
          
          echo "Deployment completed successfully!"